recv[int] q <- external;

fn log2(n: int) -> int {
    var result: int = 0;
    var original: int = n;
    while (n > 0) {
        n = n / 2;
        result = result + 1;
    }
    return result;
}

fn matSquareWithPredecessor(m1: array[array[int]], m2: array[array[int]], result: array[array[int]], p: array[array[int]], pPrev: array[array[int]]) -> unit {
	for (var i: int = 0; i < len(m1); i = i + 1) {
		for (var j: int = 0; j < len(m2[0]); j = j + 1) {
			for (var k: int = 0; k < len(m1[0]); k = k + 1) {
				var possibleRoute: int = m1[i][k] + m2[k][j];
				if (possibleRoute < result[i][j]) {
				    result[i][j] = possibleRoute;
				    p[i][j] = pPrev[k][j];
				}
			}
		}
	}
}

var scaleFactor_global: int = 0;

fn expandEdgeList(edgeList: array[array[int]], numNodes: int) -> array[array[int]] {

    // to generalize fox, we need to find a matrix divisible into q squares, and store it in there
    // this is equivalent to flooding the graph with extra nodes with no connectivity to other nodes
    // (because they will have infinite edge length to all other nodes).
    var size: int = numNodes;

    scaleFactor_global = size/q;

    var result: array[array[int]] = array[array[int]](size, array[int](size, inf));
    for (var i: int = 0; i < len(edgeList); i = i + 1) {
        var edge: array[int] = edgeList[i];
        var u: int = edge[0];
        var v: int = edge[1];
        var length: int = edge[2];
        result[u][v] = length;
        //result[v][u] = length;
    }
    for (var i: int = 0; i < len(result); i = i + 1) {
        result[i][i] = 0;
    }
    return result;
}

if (myX == 0 && myY == 0) {

    // Assume: qxq matrices have been provided
    recv[array[array[int]]] edgeList <- external;
    recv[int] numNodes <- external;

    var d: array[array[int]] = expandEdgeList(edgeList, numNodes);
    var p: array[array[int]] = array[array[int]](len(d), array[int](len(d), inf));

    for (var x: int = 0; x < len(d); x = x + 1) {
        for (var y: int = 0; y < len(d); y = y + 1) {
            if (d[x][y] != inf) {
                p[x][y] = x+scaleFactor_global*myX;
            } else {
                p[x][y] = y+scaleFactor_global*myY;
            }
        }
    }
    var log: int = log2(numNodes);
    for (var _: int = 0; _ < log; _ = _ + 1) {
        matSquareWithPredecessor(d, d, d, p, p);
    }
    send d -> external;
    send p -> external;
}
