// Constants
recv[int] q <- external;
var scaleFactor_global: int = 0;

fn mod(n: int, b: int) -> int {
    return n - b * (n/b);
}


fn printIfMain(a: int) -> unit {
    if (myX == 0 && myY == 0) { println(a); }
}

var trueNumNodes: int = 0;

fn floyd_warshall(d: array[array[int]], p: array[array[int]]) -> unit {
    for (var x: int = 0; x < len(d); x = x + 1) {
        for (var y: int = 0; y < len(d); y = y + 1) {
            if (d[x][y] != inf) {
                p[x][y] = x+scaleFactor_global*myX;
            } else {
                p[x][y] = y+scaleFactor_global*myY;
            }
        }
    }

    for (var k: int = 0; k < trueNumNodes; k = k + 1) {
        printIfMain(k);
        // this PE has distances from x -> y
        // distances from x -> k
        var from_dist: array[int] = {};
        // distances from k -> y
        var to_dist: array[int] = {};
        var to_pred: array[int] = {};
        var broadcast_proc: int = k/scaleFactor_global;
        if (broadcast_proc == myY) {
            from_dist = array[int](len(d), 0);
            var m: int = mod(k, scaleFactor_global);
            for (var x: int = 0; x < len(d); x = x + 1) {
                from_dist[x] = d[x][m];
            }
            send from_dist -> broadcast_row;
        } else {
            recv from_dist <- worker myX, broadcast_proc;
        }

        if (broadcast_proc == myX) {
            var m: int = mod(k, scaleFactor_global);
            to_dist = d[m];
            send to_dist -> broadcast_col;

            // we want to duplicate our predecessor, so send it to ourselves
            send p[m] -> broadcast_col;
            send p[m] -> worker myX, myY;
        } else {
            recv to_dist <- worker broadcast_proc, myY;
        }
        recv to_pred <- worker broadcast_proc, myY;

        for (var x: int = 0; x < len(d); x = x + 1) {
            for (var y: int = 0; y < len(d); y = y + 1) {
                var candidate_distance: int = from_dist[x] + to_dist[y];
                if (candidate_distance < d[x][y]) {
                    d[x][y] = candidate_distance;
                    p[x][y] = to_pred[y];
                }
            }
        }
    }
}

fn flattenToMatrix(arr: array[array[array[array[int]]]]) -> array[array[int]] {
    var numRows: int = len(arr) * len(arr[0][0]);
    var numCols: int = len(arr[0]) * len(arr[0][0]);
    var result: array[array[int]] = array[array[int]](numRows, array[int](numCols, 0));

    for (var i: int = 0; i < numRows; i = i + 1) {
        for (var j: int = 0; j < numCols; j = j + 1) {
            var blockRow: int = i / len(arr[0][0]);
            var blockCol: int = j / len(arr[0][0]);
            var blockRowIndex: int = mod(i, len(arr[0][0]));
            var blockColIndex: int = mod(j, len(arr[0][0]));
            result[i][j] = arr[blockRow][blockCol][blockRowIndex][blockColIndex];
        }
    }
    return result;
}

fn extractSubmatrix(matrixIn: array[array[int]], row1: int, col1: int, row2: int, col2: int) -> array[array[int]] {

    var submatrixRows: int = row2 - row1 + 1;
    var submatrixCols: int = col2 - col1 + 1;

    var result: array[array[int]] = array[array[int]](submatrixRows, array[int](submatrixCols, 0));

    for (var i: int = 0; i < submatrixRows; i = i + 1) {
        for (var j: int = 0; j < submatrixCols; j = j + 1) {
            result[i][j] = matrixIn[row1 + i][col1 + j];
        }
    }
    return result;
}

fn submatrixFor(arr: array[array[int]], r: int, c: int) -> array[array[int]] {
    // the block length
    var b: int = len(arr)/q;
    return extractSubmatrix(arr, r*b, c*b, r*b+b-1, c*b+b-1);
}

fn expandEdgeList(edgeList: array[array[int]], numNodes: int) -> array[array[int]] {

    // to generalize fox, we need to find a matrix divisible into q squares, and store it in there
    // this is equivalent to flooding the graph with extra nodes with no connectivity to other nodes
    // (because they will have infinite edge length to all other nodes).
    var size: int = numNodes;
    while (mod(size, q) != 0) {
        size = size + 1;
    }

    scaleFactor_global = size/q;
    send scaleFactor_global -> broadcast;
    // broadcast doesn't send to itself
    send scaleFactor_global -> worker 0, 0;

    var result: array[array[int]] = array[array[int]](size, array[int](size, inf));
    for (var i: int = 0; i < len(edgeList); i = i + 1) {
        var edge: array[int] = edgeList[i];
        var u: int = edge[0];
        var v: int = edge[1];
        var length: int = edge[2];
        result[u][v] = length;
        //result[v][u] = length;
    }
    for (var i: int = 0; i < len(result); i = i + 1) {
        result[i][i] = 0;
    }
    return result;
}

// Setup code
if (myX == 0 && myY == 0) {

    // Assume: qxq matrices have been provided
    recv[array[array[int]]] edgeList <- external;
    recv[int] numNodes <- external;
    send numNodes -> broadcast;
    send numNodes -> worker 0,0;

    var m: array[array[int]] = expandEdgeList(edgeList, numNodes);
    for (var r: int = 0; r < q; r = r + 1) {
        for (var c: int = 0; c < q; c = c + 1) {
            var submatr: array[array[int]] = submatrixFor(m, r, c);
            send submatr -> worker r, c;
        }
    }
}

// Receive/create data
recv trueNumNodes <- worker 0, 0;
recv scaleFactor_global <- worker 0, 0;
recv[array[array[int]]] distances <- worker 0, 0;
var predecessor: array[array[int]] = array[array[int]](len(distances), array[int](len(distances), inf));

// Generate full distance and predecessor matrices
floyd_warshall(distances, predecessor);

// Pass data to central core
send distances -> worker 0, 0;
send predecessor -> worker 0, 0;

// Termination code
if (myX == 0 && myY == 0) {
    var C: array[array[array[array[int]]]] = array[array[array[array[int]]]](q, array[array[array[int]]](q, {}));
    var P: array[array[array[array[int]]]] = array[array[array[array[int]]]](q, array[array[array[int]]](q, {}));
    for (var i: int = 0; i < q; i = i + 1) {
        for (var j: int = 0; j < q; j = j + 1) {
            recv C[i][j] <- worker i, j;
            recv P[i][j] <- worker i, j;
        }
    }
    send flattenToMatrix(C) -> external;
    send flattenToMatrix(P) -> external;
}
