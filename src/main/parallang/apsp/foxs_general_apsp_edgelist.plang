// Constants
recv[int] q <- external;

var scaleFactor_global: int = 0;

fn mod(n: int, b: int) -> int {
    return n - b * (n/b);
}

fn printIfMain(a: int) -> unit {
    if (myX == 0 && myY == 0) { println(a); }
}
fn printIfMain2(a: array[array[int]]) -> unit {
    if (myX == 0 && myY == 0) { println(a); }
}


fn matSquareWithPredecessor(m1: array[array[int]], m2: array[array[int]], result: array[array[int]], p: array[array[int]], pPrev: array[array[int]]) -> unit {
	for (var i: int = 0; i < len(m1); i = i + 1) {
		for (var j: int = 0; j < len(m2[0]); j = j + 1) {
			for (var k: int = 0; k < len(m1[0]); k = k + 1) {
				var possibleRoute: int = m1[i][k] + m2[k][j];
				if (possibleRoute < result[i][j]) {
				    result[i][j] = possibleRoute;
				    p[i][j] = pPrev[k][j];
				}
			}
		}
	}
}

fn foxs_general(a: array[array[int]], b: array[array[int]], c: array[array[int]], maxIt: int) -> array[array[int]] {
    var southNeighbor: int = mod(myX+1, q);
    var northNeighbor: int = mod(myX+q-1, q);

    var p: array[array[int]] = array[array[int]](len(a), array[int](len(a[0]), 0));
    var pPrev: array[array[int]] = array[array[int]](len(a), array[int](len(a[0]), 0));

    for (var r: int = 0; r < len(a); r = r + 1) {
        for (var c: int = 0; c < len(a[0]); c = c + 1) {
            p[r][c] = c+scaleFactor_global*myY;
            pPrev[r][c] = c+scaleFactor_global*myY;
        }
    }

    for (var r: int = 0; r < len(a); r = r + 1) {
        for (var col: int = 0; col < len(a[0]); col = col + 1) {
            c[r][col] = a[r][col];
            if (a[r][col] != inf) {
                p[r][col] = r+scaleFactor_global*myX;
                pPrev[r][col] = r+scaleFactor_global*myX;
            }
        }
    }

    for (var it: int = 0; it < maxIt; it = it + 1) {
        printIfMain(-1*it);
        for (var k: int = 0; k < q; k = k + 1) {
            printIfMain(k);
            var bCastProc: int = mod(myX+k, q);
            if (myX == 0) {
            }
            if (bCastProc == myY) {
                send a -> broadcast_row;
                matSquareWithPredecessor(a, b, c, p, pPrev);
            } else {
                recv[array[array[int]]] tempBlock <- worker myX, bCastProc;
                matSquareWithPredecessor(tempBlock, b, c, p, pPrev);
            }
            send b -> worker northNeighbor, myY;
            send pPrev -> worker northNeighbor, myY;
            recv b <- worker southNeighbor, myY;
            recv pPrev <- worker southNeighbor, myY;
        }

        var temp: array[array[int]] = pPrev;
        pPrev = p;
        p = temp;

        for (var r: int = 0; r < len(a); r = r + 1) {
            for (var col: int = 0; col < len(a[0]); col = col + 1) {
                p[r][col] = pPrev[r][col];
                a[r][col] = c[r][col];
            }
        }
        b = a;
    }

    return p;
}

fn flattenToMatrix(arr: array[array[array[array[int]]]]) -> array[array[int]] {
    var numRows: int = len(arr) * len(arr[0][0]);
    var numCols: int = len(arr[0]) * len(arr[0][0]);
    var result: array[array[int]] = array[array[int]](numRows, array[int](numCols, 0));

    for (var i: int = 0; i < numRows; i = i + 1) {
        for (var j: int = 0; j < numCols; j = j + 1) {
            var blockRow: int = i / len(arr[0][0]);
            var blockCol: int = j / len(arr[0][0]);
            var blockRowIndex: int = mod(i, len(arr[0][0]));
            var blockColIndex: int = mod(j, len(arr[0][0]));
            result[i][j] = arr[blockRow][blockCol][blockRowIndex][blockColIndex];
        }
    }
    return result;
}

fn extractSubmatrix(matrixIn: array[array[int]], row1: int, col1: int, row2: int, col2: int) -> array[array[int]] {

    var submatrixRows: int = row2 - row1 + 1;
    var submatrixCols: int = col2 - col1 + 1;

    var result: array[array[int]] = array[array[int]](submatrixRows, array[int](submatrixCols, 0));

    for (var i: int = 0; i < submatrixRows; i = i + 1) {
        for (var j: int = 0; j < submatrixCols; j = j + 1) {
            result[i][j] = matrixIn[row1 + i][col1 + j];
        }
    }
    return result;
}

fn submatrixFor(arr: array[array[int]], r: int, c: int) -> array[array[int]] {
    // the block length
    var b: int = len(arr)/q;
    return extractSubmatrix(arr, r*b, c*b, r*b+b-1, c*b+b-1);
}

fn expandEdgeList(edgeList: array[array[int]], numNodes: int) -> array[array[int]] {

    // to generalize fox, we need to find a matrix divisible into q squares, and store it in there
    // this is equivalent to flooding the graph with extra nodes with no connectivity to other nodes
    // (because they will have infinite edge length to all other nodes).
    var size: int = numNodes;
    while (mod(size, q) != 0) {
        size = size + 1;
    }

    scaleFactor_global = size/q;
    send scaleFactor_global -> broadcast;
    // broadcast doesn't send to itself
    send scaleFactor_global -> worker 0, 0;

    var result: array[array[int]] = array[array[int]](size, array[int](size, inf));
    for (var i: int = 0; i < len(edgeList); i = i + 1) {
        var edge: array[int] = edgeList[i];
        var u: int = edge[0];
        var v: int = edge[1];
        var length: int = edge[2];
        result[u][v] = length;
        //result[v][u] = length;
    }
    for (var i: int = 0; i < len(result); i = i + 1) {
        result[i][i] = 0;
    }
    return result;
}

fn log2(n: int) -> int {
    var result: int = 0;
    var original: int = n;
    while (n > 0) {
        n = n / 2;
        result = result + 1;
    }
    return result;
}

if (myX == 0 && myY == 0) {

    // Assume: qxq matrices have been provided
    recv[array[array[int]]] edgeList <- external;
    recv[int] numNodes <- external;

    var m: array[array[int]] = expandEdgeList(edgeList, numNodes);

    for (var r: int = 0; r < q; r = r + 1) {
        for (var c: int = 0; c < q; c = c + 1) {
            var submatr: array[array[int]] = submatrixFor(m, r, c);
            send submatr -> worker r, c;
            //send submatr -> worker r, c;
        }
    }
}

recv scaleFactor_global <- worker 0, 0;

recv[array[array[int]]] aBlock <- worker 0, 0;
//recv[array[array[int]]] bBlock <- worker 0, 0;

var result: array[array[int]] = array[array[int]](len(aBlock), array[int](len(aBlock), inf));


printIfMain(log2(scaleFactor_global*q));
var p: array[array[int]] = foxs_general(aBlock, aBlock, result, log2(scaleFactor_global*q));

send result -> worker 0, 0;
send p -> worker 0, 0;

if (myX == 0 && myY == 0) {
    var C: array[array[array[array[int]]]] = array[array[array[array[int]]]](q, array[array[array[int]]](q, {}));
    var P: array[array[array[array[int]]]] = array[array[array[array[int]]]](q, array[array[array[int]]](q, {}));
    for (var i: int = 0; i < q; i = i + 1) {
        for (var j: int = 0; j < q; j = j + 1) {
            recv C[i][j] <- worker i, j;
            recv P[i][j] <- worker i, j;
        }
    }
    send flattenToMatrix(C) -> external;
    send flattenToMatrix(P) -> external;
}

