/* Generated By:JJTree&JavaCC: Do not edit this line. ParallogParserConstants.java */
package uk.ac.cam.crsid.Parallang.Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParallogParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Fn = 1;
  /** RegularExpression Id. */
  int Var = 2;
  /** RegularExpression Id. */
  int Int = 3;
  /** RegularExpression Id. */
  int Array = 4;
  /** RegularExpression Id. */
  int List = 5;
  /** RegularExpression Id. */
  int Struct = 6;
  /** RegularExpression Id. */
  int New = 7;
  /** RegularExpression Id. */
  int Unit = 8;
  /** RegularExpression Id. */
  int Len = 9;
  /** RegularExpression Id. */
  int Get = 10;
  /** RegularExpression Id. */
  int Println = 11;
  /** RegularExpression Id. */
  int Option = 12;
  /** RegularExpression Id. */
  int None = 13;
  /** RegularExpression Id. */
  int Some = 14;
  /** RegularExpression Id. */
  int Map = 15;
  /** RegularExpression Id. */
  int If = 16;
  /** RegularExpression Id. */
  int Else = 17;
  /** RegularExpression Id. */
  int For = 18;
  /** RegularExpression Id. */
  int While = 19;
  /** RegularExpression Id. */
  int Return = 20;
  /** RegularExpression Id. */
  int Send = 21;
  /** RegularExpression Id. */
  int Recv = 22;
  /** RegularExpression Id. */
  int TryRecv = 23;
  /** RegularExpression Id. */
  int Worker = 24;
  /** RegularExpression Id. */
  int Broadcast = 25;
  /** RegularExpression Id. */
  int BroadcastRow = 26;
  /** RegularExpression Id. */
  int BroadcastCol = 27;
  /** RegularExpression Id. */
  int External = 28;
  /** RegularExpression Id. */
  int MyX = 29;
  /** RegularExpression Id. */
  int MyY = 30;
  /** RegularExpression Id. */
  int NumRows = 31;
  /** RegularExpression Id. */
  int NumCols = 32;
  /** RegularExpression Id. */
  int NumWorkers = 33;
  /** RegularExpression Id. */
  int isMainCore = 34;
  /** RegularExpression Id. */
  int BoolNot = 35;
  /** RegularExpression Id. */
  int ShortOr = 36;
  /** RegularExpression Id. */
  int ShortAnd = 37;
  /** RegularExpression Id. */
  int Infinity = 38;
  /** RegularExpression Id. */
  int Name = 39;
  /** RegularExpression Id. */
  int Number = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"fn\"",
    "\"var\"",
    "\"int\"",
    "\"array\"",
    "\"list\"",
    "\"struct\"",
    "\"new\"",
    "\"unit\"",
    "\"len\"",
    "\"get\"",
    "\"println\"",
    "\"option\"",
    "\"none\"",
    "\"some\"",
    "\"map\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"return\"",
    "\"send\"",
    "\"recv\"",
    "\"tryrecv\"",
    "\"worker\"",
    "\"broadcast\"",
    "\"broadcast_row\"",
    "\"broadcast_col\"",
    "\"external\"",
    "\"myX\"",
    "\"myY\"",
    "\"NumRows\"",
    "\"NumCols\"",
    "\"NumWorkers\"",
    "\"isMainCore\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"inf\"",
    "<Name>",
    "<Number>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 45>",
    "<token of kind 46>",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"->\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\",\"",
    "\"=\"",
    "\"<-\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".\"",
  };

}
